// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivateCouponRequest {
    #[prost(int64, tag="1")]
    pub team_id: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivateCouponResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTeamRequest {
    #[prost(string, tag="1")]
    pub team_name: ::prost::alloc::string::String,
    /// contestant name
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub email_address: ::prost::alloc::string::String,
    #[prost(bool, tag="4")]
    pub is_student: bool,
    #[prost(bool, tag="5")]
    pub is_in_person: bool,
    #[prost(string, tag="6")]
    pub avatar_url: ::prost::alloc::string::String,
    /// requires bypass token
    #[prost(bool, tag="16")]
    pub hidden: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateTeamResponse {
    #[prost(int64, tag="1")]
    pub team_id: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEnvCheckInformationResponse {
    #[prost(string, tag="1")]
    pub template: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::resources::EnvCheckStatus", tag="2")]
    pub status: i32,
    #[prost(string, tag="3")]
    pub instance_ip: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinTeamRequest {
    #[prost(int64, tag="1")]
    pub team_id: i64,
    #[prost(string, tag="2")]
    pub invite_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag="4")]
    pub is_student: bool,
    #[prost(bool, tag="5")]
    pub is_in_person: bool,
    #[prost(string, tag="6")]
    pub avatar_url: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JoinTeamResponse {
}
/// query parameter
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRegistrationSessionQuery {
    #[prost(int64, tag="1")]
    pub team_id: i64,
    #[prost(string, tag="2")]
    pub invite_token: ::prost::alloc::string::String,
    #[prost(string, tag="16")]
    pub bypass_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRegistrationSessionResponse {
    #[prost(message, optional, tag="1")]
    pub team: ::core::option::Option<super::super::resources::Team>,
    #[prost(enumeration="get_registration_session_response::Status", tag="2")]
    pub status: i32,
    #[prost(string, tag="3")]
    pub github_login: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub github_avatar_url: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub discord_tag: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub discord_avatar_url: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub member_invite_url: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub discord_server_id: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::resources::EnvCheckStatus", tag="9")]
    pub env_check_status: i32,
    #[prost(message, optional, tag="10")]
    pub coupon: ::core::option::Option<super::super::resources::Coupon>,
}
/// Nested message and enum types in `GetRegistrationSessionResponse`.
pub mod get_registration_session_response {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Status {
        Closed = 0,
        NotJoinable = 1,
        NotLoggedIn = 2,
        Creatable = 3,
        Joinable = 4,
        Joined = 5,
        Disqualified = 6,
    }
    impl Status {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Status::Closed => "CLOSED",
                Status::NotJoinable => "NOT_JOINABLE",
                Status::NotLoggedIn => "NOT_LOGGED_IN",
                Status::Creatable => "CREATABLE",
                Status::Joinable => "JOINABLE",
                Status::Joined => "JOINED",
                Status::Disqualified => "DISQUALIFIED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CLOSED" => Some(Self::Closed),
                "NOT_JOINABLE" => Some(Self::NotJoinable),
                "NOT_LOGGED_IN" => Some(Self::NotLoggedIn),
                "CREATABLE" => Some(Self::Creatable),
                "JOINABLE" => Some(Self::Joinable),
                "JOINED" => Some(Self::Joined),
                "DISQUALIFIED" => Some(Self::Disqualified),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRegistrationRequest {
    #[prost(string, tag="1")]
    pub team_name: ::prost::alloc::string::String,
    /// contestant name
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub email_address: ::prost::alloc::string::String,
    #[prost(bool, tag="4")]
    pub is_student: bool,
    #[prost(bool, tag="5")]
    pub is_in_person: bool,
    #[prost(string, tag="6")]
    pub avatar_url: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateRegistrationResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteRegistrationRequest {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteRegistrationResponse {
}
// @@protoc_insertion_point(module)
